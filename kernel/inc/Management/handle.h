#pragma once
#include <krnltypes.h>

#define HANDLE_COUNT_PER_LIST 120

enum HANDLE_DATA_TYPES {
	HANDLE_OTHER = 0,
	HANDLE_FILE = 1,
	HANDLE_PROCESS = 2,
	HANDLE_THREAD = 3,
	HANDLE_DLL = 4,
	HANDLE_USER_ALLOCATE = 5,
	HANDLE_KERNEL_ALLOCATE = 6,
	HANDLE_SERVER_CONNECTION = 7,
	HANDLE_SERVER = 8,
	HANDLE_CLIENT = 9,
	HANDLE_OPEN_DRIVER = 10
};
enum HANDLE_FLAGS_MASKS {
	HANDLE_FLAG_PRESENT = 1,
	HANDLE_FLAG_FREE_ON_EXIT = 2,
	HANDLE_FLAG_CLOSE_FILE_ON_EXIT = 4
};

typedef HRESULT (*HANDLE_RELEASE_PROCEDURE)(LPVOID Handle);
typedef struct _HANDLE_LIST HANDLE_LIST, * PHANDLE_LIST;
typedef struct {
	UINT64 HandleId;
	UINT64 Flags;
	UINT64 DataType;
	LPVOID Process;
	LPVOID Thread;
	HANDLE_RELEASE_PROCEDURE ReleaseProcedure;
	LPVOID Data;
	LPVOID Data1;
	LPVOID Data2;
	PHANDLE_LIST HandleList;
} HANDLE_ENTRY, *HANDLE;

typedef struct _HANDLE_LIST{
	UINT64 HandleCount;
	HANDLE_ENTRY Handles[HANDLE_COUNT_PER_LIST];
} HANDLE_LIST, *PHANDLE_LIST;

typedef struct _HANDLE_ITERATOR{
	PHANDLE_LIST Lists[HANDLE_COUNT_PER_LIST];
	struct _HANDLE_ITERATOR* Next;
} HANDLE_ITERATOR, *PHANDLE_ITERATOR;

typedef struct _HANDLE_TABLE {
	HANDLE_ITERATOR HandleIterator;
} HANDLE_TABLE;

typedef struct _HANDLE_ITERATION_STRUCTURE{
	UINT64 ListIndex;
	UINT64 HandleIndex;
	BOOL Set;
	BOOL Usable;
	HANDLE_TABLE* HandleTable;
	HANDLE_ITERATOR* HandleIterator;
} HANDLE_ITERATION_STRUCTURE, * PHANDLE_ITERATION_STRUCTURE;

HANDLE_TABLE* CreateHandleTable();
HANDLE OpenHandle(HANDLE_TABLE* HandleTable, LPVOID Thread, UINT64 Flags, UINT64 DataType, void* Data, HANDLE_RELEASE_PROCEDURE ReleaseProcedure);
HRESULT CloseHandle(HANDLE Handle);
BOOL AcquireHandle(HANDLE Handle);
HANDLE GetHandle(HANDLE_TABLE* HandleTable, const void* Data);

BOOL StartHandleIteration(HANDLE_TABLE* HandleTable, PHANDLE_ITERATION_STRUCTURE IterationStructure);
HANDLE GetNextHandle(PHANDLE_ITERATION_STRUCTURE Iteration);
BOOL EndHandleIteration(PHANDLE_ITERATION_STRUCTURE IterationStructure);